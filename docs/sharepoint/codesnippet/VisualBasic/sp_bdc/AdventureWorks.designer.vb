'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.20731.0
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorks")>  _
Partial Public Class AdventureWorksDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertContact(instance As Contact)
    End Sub
  Partial Private Sub UpdateContact(instance As Contact)
    End Sub
  Partial Private Sub DeleteContact(instance As Contact)
    End Sub
  Partial Private Sub InsertSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  Partial Private Sub UpdateSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  Partial Private Sub DeleteSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
  Partial Private Sub InsertSalesOrderHeader(instance As SalesOrderHeader)
    End Sub
  Partial Private Sub UpdateSalesOrderHeader(instance As SalesOrderHeader)
    End Sub
  Partial Private Sub DeleteSalesOrderHeader(instance As SalesOrderHeader)
    End Sub
  #End Region
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
		Get
			Return Me.GetTable(Of Contact)
		End Get
	End Property
	
	Public ReadOnly Property SalesOrderDetails() As System.Data.Linq.Table(Of SalesOrderDetail)
		Get
			Return Me.GetTable(Of SalesOrderDetail)
		End Get
	End Property
	
	Public ReadOnly Property SalesOrderHeaders() As System.Data.Linq.Table(Of SalesOrderHeader)
		Get
			Return Me.GetTable(Of SalesOrderHeader)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Person.Contact")>  _
Partial Public Class Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ContactID As Integer
	
	Private _NameStyle As Boolean
	
	Private _Title As String
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _Suffix As String
	
	Private _EmailAddress As String
	
	Private _EmailPromotion As Integer
	
	Private _Phone As String
	
	Private _PasswordHash As String
	
	Private _PasswordSalt As String
	
	Private _AdditionalContactInfo As System.Xml.Linq.XElement
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _SalesOrderHeaders As EntitySet(Of SalesOrderHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnContactIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnNameStyleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNameStyleChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnSuffixChanging(value As String)
    End Sub
    Partial Private Sub OnSuffixChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnEmailPromotionChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmailPromotionChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnAdditionalContactInfoChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnAdditionalContactInfoChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SalesOrderHeaders = New EntitySet(Of SalesOrderHeader)(AddressOf Me.attach_SalesOrderHeaders, AddressOf Me.detach_SalesOrderHeaders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ContactID() As Integer
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameStyle", DbType:="Bit NOT NULL")>  _
	Public Property NameStyle() As Boolean
		Get
			Return Me._NameStyle
		End Get
		Set
			If ((Me._NameStyle = value)  _
						= false) Then
				Me.OnNameStyleChanging(value)
				Me.SendPropertyChanging
				Me._NameStyle = value
				Me.SendPropertyChanged("NameStyle")
				Me.OnNameStyleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(8)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suffix", DbType:="NVarChar(10)")>  _
	Public Property Suffix() As String
		Get
			Return Me._Suffix
		End Get
		Set
			If (String.Equals(Me._Suffix, value) = false) Then
				Me.OnSuffixChanging(value)
				Me.SendPropertyChanging
				Me._Suffix = value
				Me.SendPropertyChanged("Suffix")
				Me.OnSuffixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailPromotion", DbType:="Int NOT NULL")>  _
	Public Property EmailPromotion() As Integer
		Get
			Return Me._EmailPromotion
		End Get
		Set
			If ((Me._EmailPromotion = value)  _
						= false) Then
				Me.OnEmailPromotionChanging(value)
				Me.SendPropertyChanging
				Me._EmailPromotion = value
				Me.SendPropertyChanged("EmailPromotion")
				Me.OnEmailPromotionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(25)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordHash() As String
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (String.Equals(Me._PasswordHash, value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdditionalContactInfo", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property AdditionalContactInfo() As System.Xml.Linq.XElement
		Get
			Return Me._AdditionalContactInfo
		End Get
		Set
			If (Object.Equals(Me._AdditionalContactInfo, value) = false) Then
				Me.OnAdditionalContactInfoChanging(value)
				Me.SendPropertyChanging
				Me._AdditionalContactInfo = value
				Me.SendPropertyChanged("AdditionalContactInfo")
				Me.OnAdditionalContactInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_SalesOrderHeader", Storage:="_SalesOrderHeaders", ThisKey:="ContactID", OtherKey:="ContactID")>  _
	Public Property SalesOrderHeaders() As EntitySet(Of SalesOrderHeader)
		Get
			Return Me._SalesOrderHeaders
		End Get
		Set
			Me._SalesOrderHeaders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SalesOrderHeaders(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Contact = Me
	End Sub
	
	Private Sub detach_SalesOrderHeaders(ByVal entity As SalesOrderHeader)
		Me.SendPropertyChanging
		entity.Contact = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Sales.SalesOrderDetail")>  _
Partial Public Class SalesOrderDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalesOrderID As Integer
	
	Private _SalesOrderDetailID As Integer
	
	Private _CarrierTrackingNumber As String
	
	Private _OrderQty As Short
	
	Private _ProductID As Integer
	
	Private _SpecialOfferID As Integer
	
	Private _UnitPrice As Decimal
	
	Private _UnitPriceDiscount As Decimal
	
	Private _LineTotal As Decimal
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _SalesOrderHeader As EntityRef(Of SalesOrderHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderIDChanged()
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanged()
    End Sub
    Partial Private Sub OnCarrierTrackingNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCarrierTrackingNumberChanged()
    End Sub
    Partial Private Sub OnOrderQtyChanging(value As Short)
    End Sub
    Partial Private Sub OnOrderQtyChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnSpecialOfferIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSpecialOfferIDChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanged()
    End Sub
    Partial Private Sub OnLineTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLineTotalChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SalesOrderHeader = CType(Nothing, EntityRef(Of SalesOrderHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesOrderID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SalesOrderID() As Integer
		Get
			Return Me._SalesOrderID
		End Get
		Set
			If ((Me._SalesOrderID = value)  _
						= false) Then
				If Me._SalesOrderHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSalesOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderID = value
				Me.SendPropertyChanged("SalesOrderID")
				Me.OnSalesOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesOrderDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SalesOrderDetailID() As Integer
		Get
			Return Me._SalesOrderDetailID
		End Get
		Set
			If ((Me._SalesOrderDetailID = value)  _
						= false) Then
				Me.OnSalesOrderDetailIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderDetailID = value
				Me.SendPropertyChanged("SalesOrderDetailID")
				Me.OnSalesOrderDetailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarrierTrackingNumber", DbType:="NVarChar(25)")>  _
	Public Property CarrierTrackingNumber() As String
		Get
			Return Me._CarrierTrackingNumber
		End Get
		Set
			If (String.Equals(Me._CarrierTrackingNumber, value) = false) Then
				Me.OnCarrierTrackingNumberChanging(value)
				Me.SendPropertyChanging
				Me._CarrierTrackingNumber = value
				Me.SendPropertyChanged("CarrierTrackingNumber")
				Me.OnCarrierTrackingNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderQty", DbType:="SmallInt NOT NULL")>  _
	Public Property OrderQty() As Short
		Get
			Return Me._OrderQty
		End Get
		Set
			If ((Me._OrderQty = value)  _
						= false) Then
				Me.OnOrderQtyChanging(value)
				Me.SendPropertyChanging
				Me._OrderQty = value
				Me.SendPropertyChanged("OrderQty")
				Me.OnOrderQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecialOfferID", DbType:="Int NOT NULL")>  _
	Public Property SpecialOfferID() As Integer
		Get
			Return Me._SpecialOfferID
		End Get
		Set
			If ((Me._SpecialOfferID = value)  _
						= false) Then
				Me.OnSpecialOfferIDChanging(value)
				Me.SendPropertyChanging
				Me._SpecialOfferID = value
				Me.SendPropertyChanged("SpecialOfferID")
				Me.OnSpecialOfferIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money NOT NULL")>  _
	Public Property UnitPrice() As Decimal
		Get
			Return Me._UnitPrice
		End Get
		Set
			If ((Me._UnitPrice = value)  _
						= false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPriceDiscount", DbType:="Money NOT NULL")>  _
	Public Property UnitPriceDiscount() As Decimal
		Get
			Return Me._UnitPriceDiscount
		End Get
		Set
			If ((Me._UnitPriceDiscount = value)  _
						= false) Then
				Me.OnUnitPriceDiscountChanging(value)
				Me.SendPropertyChanging
				Me._UnitPriceDiscount = value
				Me.SendPropertyChanged("UnitPriceDiscount")
				Me.OnUnitPriceDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineTotal", AutoSync:=AutoSync.Always, DbType:="Decimal(38,6) NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property LineTotal() As Decimal
		Get
			Return Me._LineTotal
		End Get
		Set
			If ((Me._LineTotal = value)  _
						= false) Then
				Me.OnLineTotalChanging(value)
				Me.SendPropertyChanging
				Me._LineTotal = value
				Me.SendPropertyChanged("LineTotal")
				Me.OnLineTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SalesOrderHeader_SalesOrderDetail", Storage:="_SalesOrderHeader", ThisKey:="SalesOrderID", OtherKey:="SalesOrderID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property SalesOrderHeader() As SalesOrderHeader
		Get
			Return Me._SalesOrderHeader.Entity
		End Get
		Set
			Dim previousValue As SalesOrderHeader = Me._SalesOrderHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SalesOrderHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SalesOrderHeader.Entity = Nothing
					previousValue.SalesOrderDetails.Remove(Me)
				End If
				Me._SalesOrderHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SalesOrderDetails.Add(Me)
					Me._SalesOrderID = value.SalesOrderID
				Else
					Me._SalesOrderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SalesOrderHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Sales.SalesOrderHeader")>  _
Partial Public Class SalesOrderHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalesOrderID As Integer
	
	Private _RevisionNumber As Byte
	
	Private _OrderDate As Date
	
	Private _DueDate As Date
	
	Private _ShipDate As System.Nullable(Of Date)
	
	Private _Status As Byte
	
	Private _OnlineOrderFlag As Boolean
	
	Private _SalesOrderNumber As String
	
	Private _PurchaseOrderNumber As String
	
	Private _AccountNumber As String
	
	Private _CustomerID As Integer
	
	Private _ContactID As Integer
	
	Private _SalesPersonID As System.Nullable(Of Integer)
	
	Private _TerritoryID As System.Nullable(Of Integer)
	
	Private _BillToAddressID As Integer
	
	Private _ShipToAddressID As Integer
	
	Private _ShipMethodID As Integer
	
	Private _CreditCardID As System.Nullable(Of Integer)
	
	Private _CreditCardApprovalCode As String
	
	Private _CurrencyRateID As System.Nullable(Of Integer)
	
	Private _SubTotal As Decimal
	
	Private _TaxAmt As Decimal
	
	Private _Freight As Decimal
	
	Private _TotalDue As Decimal
	
	Private _Comment As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _SalesOrderDetails As EntitySet(Of SalesOrderDetail)
	
	Private _Contact As EntityRef(Of Contact)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderIDChanged()
    End Sub
    Partial Private Sub OnRevisionNumberChanging(value As Byte)
    End Sub
    Partial Private Sub OnRevisionNumberChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnDueDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDueDateChanged()
    End Sub
    Partial Private Sub OnShipDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShipDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnOnlineOrderFlagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnOnlineOrderFlagChanged()
    End Sub
    Partial Private Sub OnSalesOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnSalesOrderNumberChanged()
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPurchaseOrderNumberChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnSalesPersonIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSalesPersonIDChanged()
    End Sub
    Partial Private Sub OnTerritoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerritoryIDChanged()
    End Sub
    Partial Private Sub OnBillToAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBillToAddressIDChanged()
    End Sub
    Partial Private Sub OnShipToAddressIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnShipToAddressIDChanged()
    End Sub
    Partial Private Sub OnShipMethodIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnShipMethodIDChanged()
    End Sub
    Partial Private Sub OnCreditCardIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreditCardIDChanged()
    End Sub
    Partial Private Sub OnCreditCardApprovalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCreditCardApprovalCodeChanged()
    End Sub
    Partial Private Sub OnCurrencyRateIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrencyRateIDChanged()
    End Sub
    Partial Private Sub OnSubTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSubTotalChanged()
    End Sub
    Partial Private Sub OnTaxAmtChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTaxAmtChanged()
    End Sub
    Partial Private Sub OnFreightChanging(value As Decimal)
    End Sub
    Partial Private Sub OnFreightChanged()
    End Sub
    Partial Private Sub OnTotalDueChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTotalDueChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SalesOrderDetails = New EntitySet(Of SalesOrderDetail)(AddressOf Me.attach_SalesOrderDetails, AddressOf Me.detach_SalesOrderDetails)
		Me._Contact = CType(Nothing, EntityRef(Of Contact))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesOrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SalesOrderID() As Integer
		Get
			Return Me._SalesOrderID
		End Get
		Set
			If ((Me._SalesOrderID = value)  _
						= false) Then
				Me.OnSalesOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderID = value
				Me.SendPropertyChanged("SalesOrderID")
				Me.OnSalesOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevisionNumber", DbType:="TinyInt NOT NULL")>  _
	Public Property RevisionNumber() As Byte
		Get
			Return Me._RevisionNumber
		End Get
		Set
			If ((Me._RevisionNumber = value)  _
						= false) Then
				Me.OnRevisionNumberChanging(value)
				Me.SendPropertyChanging
				Me._RevisionNumber = value
				Me.SendPropertyChanged("RevisionNumber")
				Me.OnRevisionNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime NOT NULL")>  _
	Public Property OrderDate() As Date
		Get
			Return Me._OrderDate
		End Get
		Set
			If ((Me._OrderDate = value)  _
						= false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DueDate", DbType:="DateTime NOT NULL")>  _
	Public Property DueDate() As Date
		Get
			Return Me._DueDate
		End Get
		Set
			If ((Me._DueDate = value)  _
						= false) Then
				Me.OnDueDateChanging(value)
				Me.SendPropertyChanging
				Me._DueDate = value
				Me.SendPropertyChanged("DueDate")
				Me.OnDueDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipDate", DbType:="DateTime")>  _
	Public Property ShipDate() As System.Nullable(Of Date)
		Get
			Return Me._ShipDate
		End Get
		Set
			If (Me._ShipDate.Equals(value) = false) Then
				Me.OnShipDateChanging(value)
				Me.SendPropertyChanging
				Me._ShipDate = value
				Me.SendPropertyChanged("ShipDate")
				Me.OnShipDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="TinyInt NOT NULL")>  _
	Public Property Status() As Byte
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnlineOrderFlag", DbType:="Bit NOT NULL")>  _
	Public Property OnlineOrderFlag() As Boolean
		Get
			Return Me._OnlineOrderFlag
		End Get
		Set
			If ((Me._OnlineOrderFlag = value)  _
						= false) Then
				Me.OnOnlineOrderFlagChanging(value)
				Me.SendPropertyChanging
				Me._OnlineOrderFlag = value
				Me.SendPropertyChanged("OnlineOrderFlag")
				Me.OnOnlineOrderFlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesOrderNumber", AutoSync:=AutoSync.Always, DbType:="NVarChar(25) NOT NULL", CanBeNull:=false, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property SalesOrderNumber() As String
		Get
			Return Me._SalesOrderNumber
		End Get
		Set
			If (String.Equals(Me._SalesOrderNumber, value) = false) Then
				Me.OnSalesOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._SalesOrderNumber = value
				Me.SendPropertyChanged("SalesOrderNumber")
				Me.OnSalesOrderNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseOrderNumber", DbType:="NVarChar(25)")>  _
	Public Property PurchaseOrderNumber() As String
		Get
			Return Me._PurchaseOrderNumber
		End Get
		Set
			If (String.Equals(Me._PurchaseOrderNumber, value) = false) Then
				Me.OnPurchaseOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseOrderNumber = value
				Me.SendPropertyChanged("PurchaseOrderNumber")
				Me.OnPurchaseOrderNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="NVarChar(15)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="Int NOT NULL")>  _
	Public Property ContactID() As Integer
		Get
			Return Me._ContactID
		End Get
		Set
			If ((Me._ContactID = value)  _
						= false) Then
				If Me._Contact.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesPersonID", DbType:="Int")>  _
	Public Property SalesPersonID() As System.Nullable(Of Integer)
		Get
			Return Me._SalesPersonID
		End Get
		Set
			If (Me._SalesPersonID.Equals(value) = false) Then
				Me.OnSalesPersonIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesPersonID = value
				Me.SendPropertyChanged("SalesPersonID")
				Me.OnSalesPersonIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerritoryID", DbType:="Int")>  _
	Public Property TerritoryID() As System.Nullable(Of Integer)
		Get
			Return Me._TerritoryID
		End Get
		Set
			If (Me._TerritoryID.Equals(value) = false) Then
				Me.OnTerritoryIDChanging(value)
				Me.SendPropertyChanging
				Me._TerritoryID = value
				Me.SendPropertyChanged("TerritoryID")
				Me.OnTerritoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillToAddressID", DbType:="Int NOT NULL")>  _
	Public Property BillToAddressID() As Integer
		Get
			Return Me._BillToAddressID
		End Get
		Set
			If ((Me._BillToAddressID = value)  _
						= false) Then
				Me.OnBillToAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._BillToAddressID = value
				Me.SendPropertyChanged("BillToAddressID")
				Me.OnBillToAddressIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipToAddressID", DbType:="Int NOT NULL")>  _
	Public Property ShipToAddressID() As Integer
		Get
			Return Me._ShipToAddressID
		End Get
		Set
			If ((Me._ShipToAddressID = value)  _
						= false) Then
				Me.OnShipToAddressIDChanging(value)
				Me.SendPropertyChanging
				Me._ShipToAddressID = value
				Me.SendPropertyChanged("ShipToAddressID")
				Me.OnShipToAddressIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipMethodID", DbType:="Int NOT NULL")>  _
	Public Property ShipMethodID() As Integer
		Get
			Return Me._ShipMethodID
		End Get
		Set
			If ((Me._ShipMethodID = value)  _
						= false) Then
				Me.OnShipMethodIDChanging(value)
				Me.SendPropertyChanging
				Me._ShipMethodID = value
				Me.SendPropertyChanged("ShipMethodID")
				Me.OnShipMethodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditCardID", DbType:="Int")>  _
	Public Property CreditCardID() As System.Nullable(Of Integer)
		Get
			Return Me._CreditCardID
		End Get
		Set
			If (Me._CreditCardID.Equals(value) = false) Then
				Me.OnCreditCardIDChanging(value)
				Me.SendPropertyChanging
				Me._CreditCardID = value
				Me.SendPropertyChanged("CreditCardID")
				Me.OnCreditCardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditCardApprovalCode", DbType:="VarChar(15)")>  _
	Public Property CreditCardApprovalCode() As String
		Get
			Return Me._CreditCardApprovalCode
		End Get
		Set
			If (String.Equals(Me._CreditCardApprovalCode, value) = false) Then
				Me.OnCreditCardApprovalCodeChanging(value)
				Me.SendPropertyChanging
				Me._CreditCardApprovalCode = value
				Me.SendPropertyChanged("CreditCardApprovalCode")
				Me.OnCreditCardApprovalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyRateID", DbType:="Int")>  _
	Public Property CurrencyRateID() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyRateID
		End Get
		Set
			If (Me._CurrencyRateID.Equals(value) = false) Then
				Me.OnCurrencyRateIDChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyRateID = value
				Me.SendPropertyChanged("CurrencyRateID")
				Me.OnCurrencyRateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="Money NOT NULL")>  _
	Public Property SubTotal() As Decimal
		Get
			Return Me._SubTotal
		End Get
		Set
			If ((Me._SubTotal = value)  _
						= false) Then
				Me.OnSubTotalChanging(value)
				Me.SendPropertyChanging
				Me._SubTotal = value
				Me.SendPropertyChanged("SubTotal")
				Me.OnSubTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxAmt", DbType:="Money NOT NULL")>  _
	Public Property TaxAmt() As Decimal
		Get
			Return Me._TaxAmt
		End Get
		Set
			If ((Me._TaxAmt = value)  _
						= false) Then
				Me.OnTaxAmtChanging(value)
				Me.SendPropertyChanging
				Me._TaxAmt = value
				Me.SendPropertyChanged("TaxAmt")
				Me.OnTaxAmtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Freight", DbType:="Money NOT NULL")>  _
	Public Property Freight() As Decimal
		Get
			Return Me._Freight
		End Get
		Set
			If ((Me._Freight = value)  _
						= false) Then
				Me.OnFreightChanging(value)
				Me.SendPropertyChanging
				Me._Freight = value
				Me.SendPropertyChanged("Freight")
				Me.OnFreightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalDue", AutoSync:=AutoSync.Always, DbType:="Money NOT NULL", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property TotalDue() As Decimal
		Get
			Return Me._TotalDue
		End Get
		Set
			If ((Me._TotalDue = value)  _
						= false) Then
				Me.OnTotalDueChanging(value)
				Me.SendPropertyChanging
				Me._TotalDue = value
				Me.SendPropertyChanged("TotalDue")
				Me.OnTotalDueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NVarChar(128)")>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SalesOrderHeader_SalesOrderDetail", Storage:="_SalesOrderDetails", ThisKey:="SalesOrderID", OtherKey:="SalesOrderID")>  _
	Public Property SalesOrderDetails() As EntitySet(Of SalesOrderDetail)
		Get
			Return Me._SalesOrderDetails
		End Get
		Set
			Me._SalesOrderDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contact_SalesOrderHeader", Storage:="_Contact", ThisKey:="ContactID", OtherKey:="ContactID", IsForeignKey:=true)>  _
	Public Property Contact() As Contact
		Get
			Return Me._Contact.Entity
		End Get
		Set
			Dim previousValue As Contact = Me._Contact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Contact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Contact.Entity = Nothing
					previousValue.SalesOrderHeaders.Remove(Me)
				End If
				Me._Contact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SalesOrderHeaders.Add(Me)
					Me._ContactID = value.ContactID
				Else
					Me._ContactID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Contact")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SalesOrderDetails(ByVal entity As SalesOrderDetail)
		Me.SendPropertyChanging
		entity.SalesOrderHeader = Me
	End Sub
	
	Private Sub detach_SalesOrderDetails(ByVal entity As SalesOrderDetail)
		Me.SendPropertyChanging
		entity.SalesOrderHeader = Nothing
	End Sub
End Class
